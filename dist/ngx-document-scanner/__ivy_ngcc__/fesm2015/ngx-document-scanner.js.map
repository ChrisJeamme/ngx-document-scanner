{"version":3,"file":"ngx-document-scanner.js","sources":["ngx-document-scanner/lib/services/limits.service.ts","ngx-document-scanner/lib/components/draggable-point/ngx-draggable-point.component.ts","ngx-document-scanner/lib/components/filter-menu/ngx-filter-menu.component.ts","ngx-document-scanner/lib/components/shape-outline/ngx-shape-outline.component.ts","ngx-document-scanner/lib/components/image-editor/ngx-doc-scanner.component.ts","ngx-document-scanner/lib/ngx-document-scanner.module.ts","ngx-document-scanner/lib/PublicModels.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {ImageDimensions} from '../PublicModels';\nimport {LimitException, XYPosition} from '../PrivateModels';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LimitsService {\n\n\n  private limitDirections: RolesArray = ['left', 'right', 'top', 'bottom'];\n  /**\n   * stores the crop limits limits\n   */\n  private _limits = {\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0\n  };\n  /**\n   * stores the array of the draggable points displayed on the crop area\n   */\n  private _points: Array<PointPositionChange> = [];\n  /**\n   * stores the pane dimensions\n   */\n  private _paneDimensions: ImageDimensions;\n\n  // *********** //\n  // Observables //\n  // *********** //\n  public positions: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>(Array.from(this._points));\n  public repositionEvent: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>([]);\n  public limits: BehaviorSubject<AreaLimits> = new BehaviorSubject<AreaLimits>(this._limits);\n  public paneDimensions: BehaviorSubject<ImageDimensions> = new BehaviorSubject({width: 0, height: 0});\n\n  constructor() {\n  }\n\n  /**\n   * set privew pane dimensions\n   */\n  public setPaneDimensions(dimensions: ImageDimensions) {\n    return new Promise((resolve, reject) => {\n      this._paneDimensions = dimensions;\n      this.paneDimensions.next(dimensions);\n      resolve();\n    });\n  }\n\n  /**\n   * repositions points externally\n   */\n  public repositionPoints(positions) {\n    this._points = positions;\n    positions.forEach(position => {\n      this.positionChange(position);\n    });\n    this.repositionEvent.next(positions);\n  }\n\n  /**\n   * updates limits and point positions and calls next on the observables\n   * @param positionChangeData - position change event data\n   */\n  public positionChange(positionChangeData: PointPositionChange) {\n    // update positions according to current position change\n    this.updatePosition(positionChangeData);\n\n    // for each direction:\n    // 1. filter the _points that have a role as the direction's limit\n    // 2. for top and left find max x | y values, and min for right and bottom\n    this.limitDirections.forEach(direction => {\n      const relevantPoints = this._points.filter(point => {\n        return point.roles.includes(direction);\n      })\n        .map((point: PointPositionChange) => {\n          return point[this.getDirectionAxis(direction)];\n        });\n      let limit;\n      if (direction === 'top' || direction === 'left') {\n        limit = Math.max(...relevantPoints);\n      }\n      if (direction === 'right' || direction === 'bottom') {\n        limit = Math.min(...relevantPoints);\n      }\n      this._limits[direction] = limit;\n    });\n\n    this.limits.next(this._limits);\n    this.positions.next(Array.from(this._points));\n  }\n\n  /**\n   * updates the position of the point\n   * @param positionChange - position change event data\n   */\n  public updatePosition(positionChange: PointPositionChange) {\n    // finds the current position of the point by it's roles, than splices it for the new position or pushes it if it's not yet in the array\n    const index = this._points.findIndex(point => {\n      return this.compareArray(positionChange.roles, point.roles);\n    });\n    if (index === -1) {\n      this._points.push(positionChange);\n    } else {\n      this._points.splice(index, 1, positionChange);\n    }\n  }\n\n  /**\n   * check if a position change event exceeds the limits\n   * @param positionChange - position change event data\n   * @returns LimitException0\n   */\n  public exceedsLimit(positionChange: PointPositionChange): LimitException {\n    const pointLimits = this.limitDirections.filter(direction => {\n      return !positionChange.roles.includes(direction);\n    });\n\n    const limitException: LimitException = {\n      exceeds: false,\n      resetCoefficients: {\n        x: 0,\n        y: 0\n      },\n      resetCoordinates: {\n        x: positionChange.x,\n        y: positionChange.y\n      }\n    };\n\n    // limit directions are the opposite sides of the point's roles\n    pointLimits.forEach(direction => {\n      const directionAxis = this.getDirectionAxis(direction);\n      if (direction === 'top' || direction === 'left') {\n        if (positionChange[directionAxis] < this._limits[direction]) {\n          limitException.resetCoefficients[directionAxis] = 1;\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\n        }\n      } else if (direction === 'right' || direction === 'bottom') {\n        if (positionChange[directionAxis] > this._limits[direction]) {\n          limitException.resetCoefficients[directionAxis] = -1;\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\n        }\n      }\n    });\n\n    if (limitException.resetCoefficients.x !== 0 || limitException.resetCoefficients.y !== 0) {\n      limitException.exceeds = true;\n    }\n\n    return limitException;\n  }\n\n  /**\n   * rotate crop tool points clockwise\n   * @param resizeRatios - ratio between the new dimensions and the previous\n   * @param initialPreviewDimensions - preview pane dimensions before rotation\n   * @param initialPositions - current positions before rotation\n   */\n  public rotateClockwise(resizeRatios, initialPreviewDimensions, initialPositions: Array<PointPositionChange>) {\n    // convert positions to ratio between position to initial pane dimension\n    initialPositions = initialPositions.map(point => {\n      return new PositionChangeData({\n        x: point.x / initialPreviewDimensions.width,\n        y: point.y / initialPreviewDimensions.height,\n      }, point.roles);\n    });\n    this.repositionPoints(initialPositions.map(point => {\n      return this.rotateCornerClockwise(point);\n    }));\n  }\n\n  /**\n   * returns the corner positions after a 90 degrees clockwise rotation\n   */\n  private rotateCornerClockwise(corner: PointPositionChange): PointPositionChange {\n    const rotated: PointPositionChange = {\n      x: this._paneDimensions.width * (1 - corner.y),\n      y: this._paneDimensions.height * corner.x,\n      roles: []\n    };\n    // rotates corner according to order\n    const order: Array<RolesArray> = [\n      ['bottom', 'left'],\n      ['top', 'left'],\n      ['top', 'right'],\n      ['bottom', 'right'],\n      ['bottom', 'left']\n    ];\n    rotated.roles = order[order.findIndex(roles => {\n      return this.compareArray(roles, corner.roles);\n    }) + 1];\n    return rotated;\n  }\n\n  /**\n   * checks if two array contain the same values\n   * @param array1 - array 1\n   * @param array2 - array 2\n   * @returns boolean\n   */\n  public compareArray(array1: Array<string>, array2: Array<string>): boolean {\n    return array1.every((element) => {\n      return array2.includes(element);\n    }) && array1.length === array2.length;\n  }\n\n  private getDirectionAxis(direction) {\n    return {\n      left: 'x',\n      right: 'x',\n      top: 'y',\n      bottom: 'y'\n    }[direction];\n  }\n}\n\n\nexport interface PointPositionChange {\n  x: number;\n  y: number;\n  roles: RolesArray;\n}\n\nexport interface AreaLimits {\n  top: number;\n  bottom: number;\n  right: number;\n  left: number;\n}\n\nexport type RolesArray = Array<Direction>;\n\nexport class PositionChangeData implements PointPositionChange {\n  x: number;\n  y: number;\n  roles: RolesArray;\n\n  constructor(position: XYPosition, roles: RolesArray) {\n    this.x = position.x;\n    this.y = position.y;\n    this.roles = roles;\n  }\n}\n\nexport type Direction = 'left' | 'right' | 'top' | 'bottom';\n","import {AfterViewInit, Component, Input} from '@angular/core';\nimport {LimitsService, PointPositionChange, PositionChangeData} from '../../services/limits.service';\nimport {ImageDimensions} from '../../PublicModels';\nimport {LimitException, XYPosition} from '../../PrivateModels';\n\n@Component({\n  selector: 'ngx-draggable-point',\n  templateUrl: './ngx-draggable-point.component.html',\n})\nexport class NgxDraggablePointComponent implements AfterViewInit {\n  @Input() width = 10;\n  @Input() height = 10;\n  @Input() color = '#3cabe2';\n  @Input() shape: 'rect' | 'circle' = 'rect';\n  @Input() pointOptions: 'rect' | 'circle' = 'rect';\n  @Input() limitRoles: Array<'left'|'right'|'top'|'bottom'>;\n  @Input() startPosition: XYPosition;\n  @Input() container: HTMLElement;\n  @Input() private _currentPosition: XYPosition;\n  position: XYPosition = {\n    x: 0,\n    y: 0\n  };\n  private _paneDimensions: ImageDimensions;\n  resetPosition: XYPosition;\n\n  constructor(private limitsService: LimitsService) {}\n\n  ngAfterViewInit() {\n    Object.keys(this.pointOptions).forEach(key => {\n      this[key] = this.pointOptions[key];\n    });\n    // subscribe to pane dimensions changes\n    this.limitsService.paneDimensions.subscribe(dimensions => {\n      if (dimensions.width > 0 && dimensions.width > 0) {\n        this._paneDimensions = {\n          width: dimensions.width,\n          height: dimensions.height\n        };\n        this.position = this.getInitialPosition(dimensions);\n        this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\n      }\n    });\n    // subscribe to external reposition events\n    this.limitsService.repositionEvent.subscribe(positions => {\n      if (positions.length > 0) {\n        this.externalReposition(positions);\n      }\n    });\n  }\n\n  /**\n   * returns a css style object for the point\n   */\n  pointStyle() {\n    return {\n      width: this.width + 'px',\n      height: this.height + 'px',\n      'background-color': this.color,\n      'border-radius': this.shape === 'circle' ? '100%' : 0,\n      position: 'absolute'\n    };\n  }\n\n  /**\n   * registers a position change on the limits service, and adjusts position if necessary\n   * @param position - the current position of the point\n   */\n  positionChange(position: XYPosition) {\n    const positionChangeData = new PositionChangeData(position, this.limitRoles);\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\n    if (limitException.exceeds) {\n      // if exceeds limits, reposition\n      this.resetPosition = limitException.resetCoordinates;\n    } else {\n      this.limitsService.positionChange(positionChangeData);\n      this._currentPosition = position;\n    }\n  }\n\n  /**\n   * adjusts the position of the point after a limit exception\n   */\n  private adjustPosition(limitException: LimitException) {\n    const newPosition = {\n      x: 0,\n      y: 0\n    };\n    Object.keys(this.startPosition).forEach(axis => {\n      newPosition[axis] = limitException.resetCoordinates[axis] + limitException.resetCoefficients[axis];\n    });\n    this.position = newPosition;\n    this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\n  }\n\n  /**\n   * called on movement end, checks if last position exceeded the limits ad adjusts\n   */\n  movementEnd(position: XYPosition) {\n    let positionChangeData = new PositionChangeData(position, this.limitRoles);\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\n    if (limitException.exceeds) {\n      this.resetPosition = limitException.resetCoordinates;\n      if (limitException.exceeds) {\n        this.adjustPosition(limitException);\n        positionChangeData = new PositionChangeData(this.position, this.limitRoles);\n        this.limitsService.updatePosition(positionChangeData);\n      }\n    }\n  }\n\n  /**\n   * calculates the initial positions of the point by it's roles\n   * @param dimensions - dimensions of the pane in which the point is located\n   */\n  private getInitialPosition(dimensions: ImageDimensions) {\n    return {\n      x: this.limitRoles.includes('left') ? 0 : dimensions.width - this.width / 2,\n      y: this.limitRoles.includes('top') ? 0 : dimensions.height - this.height / 2\n    };\n  }\n\n  /**\n   * repositions the point after an external reposition event\n   * @param positions - an array of all points on the pane\n   */\n  private externalReposition(positions: Array<PointPositionChange>) {\n    positions.forEach(position => {\n      if (this.limitsService.compareArray(this.limitRoles, position.roles)) {\n        position = this.enforcePaneLimits(position);\n        this.position = {\n          x: position.x,\n          y: position.y\n        };\n      }\n    });\n  }\n\n  /**\n   * returns a new point position if the movement exceeded the pane limit\n   */\n  private enforcePaneLimits(position: PointPositionChange): PointPositionChange {\n    if (this._paneDimensions.width === 0 || this._paneDimensions.height === 0) {\n      return position;\n    } else {\n      if (position.x > this._paneDimensions.width) { position.x = this._paneDimensions.width; }\n      if (position.x < 0) { position.x = 1; }\n      if (position.y > this._paneDimensions.height) { position.y = this._paneDimensions.height; }\n      if (position.y < 0) { position.y = 1; }\n    }\n    return position;\n  }\n}\n","import {Component, EventEmitter, Inject, Output} from '@angular/core';\nimport {EditorActionButton} from '../../PrivateModels';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef} from '@angular/material/bottom-sheet';\n\n@Component({\n  selector: 'ngx-filter-menu',\n  templateUrl: './ngx-filter-menu.component.html',\n})\nexport class NgxFilterMenuComponent {\n  filterOptions: Array<EditorActionButton> = [\n    {\n      name: 'default',\n      icon: 'filter_b_and_w',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W'\n    },\n    {\n      name: 'bw2',\n      icon: 'filter_b_and_w',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W 2'\n    },\n    {\n      name: 'bw3',\n      icon: 'blur_on',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W 3'\n    },\n    {\n      name: 'magic_color',\n      icon: 'filter_vintage',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'Magic Color'\n    },\n    {\n      name: 'original',\n      icon: 'crop_original',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'Original'\n    },\n  ];\n  @Output() filterSelected: EventEmitter<string> = new EventEmitter();\n  selectOption(optionName) {\n    this.data.filter = optionName;\n    this.bottomSheetRef.dismiss();\n  }\n\n  constructor(private bottomSheetRef: MatBottomSheetRef<NgxFilterMenuComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: any\n              ) {}\n\n}\n","import {AfterViewInit, Component, Input, ViewChild} from '@angular/core';\nimport {LimitsService, PointPositionChange} from '../../services/limits.service';\nimport {ImageDimensions} from '../../PublicModels';\n\n@Component({\n  selector: 'ngx-shape-outine',\n  templateUrl: './ngx-shape-outline.component.html',\n})\nexport class NgxShapeOutlineComponent implements AfterViewInit {\n\n  @Input() color = '#3cabe2';\n  @Input() weight: number;\n  @Input() dimensions: ImageDimensions;\n  @ViewChild('outline') canvas;\n\n  private _points: Array<PointPositionChange>;\n  private _sortedPoints: Array<PointPositionChange>;\n  constructor(private limitsService: LimitsService) {}\n\n  ngAfterViewInit() {\n    // init drawing canvas dimensions\n    this.canvas.nativeElement.width = this.dimensions.width;\n    this.canvas.nativeElement.height = this.dimensions.height;\n    this.limitsService.positions.subscribe(positions => {\n      if (positions.length === 4) {\n        this._points = positions;\n        this.sortPoints();\n        this.clearCanvas();\n        this.drawShape();\n      }\n    });\n    // subscribe to changes in the pane's dimensions\n    this.limitsService.paneDimensions.subscribe(dimensions => {\n      this.clearCanvas();\n      this.canvas.nativeElement.width = dimensions.width;\n      this.canvas.nativeElement.height = dimensions.height;\n    });\n    // subscribe to reposition events\n    this.limitsService.repositionEvent.subscribe( positions => {\n      if (positions.length === 4) {\n        setTimeout( () => {\n          this.clearCanvas();\n          this.sortPoints();\n          this.drawShape();\n        }, 10);\n      }\n    });\n  }\n\n  /**\n   * clears the shape canvas\n   */\n  private clearCanvas() {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  /**\n   * sorts the array of points according to their clockwise alignment\n   */\n  private sortPoints() {\n    const _points = Array.from(this._points);\n    const sortedPoints = [];\n\n    const sortOrder = {\n      vertical: ['top', 'top', 'bottom', 'bottom'],\n      horizontal: ['left', 'right', 'right', 'left']\n    };\n\n    for (let i = 0; i < 4; i++) {\n      const roles = Array.from([sortOrder.vertical[i], sortOrder.horizontal[i]]);\n      sortedPoints.push(_points.filter((point) => {\n        return this.limitsService.compareArray(point.roles, roles);\n      })[0]);\n\n    }\n    this._sortedPoints = sortedPoints;\n  }\n\n  /**\n   * draws a line between the points according to their order\n   */\n  private drawShape() {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = this.weight;\n    ctx.strokeStyle = this.color;\n    ctx.beginPath();\n    this._sortedPoints.forEach((point, index) => {\n      if (index === 0) {\n        ctx.moveTo(point.x, point.y);\n      }\n      if (index !== this._sortedPoints.length - 1) {\n        const nextPoint = this._sortedPoints[index + 1];\n        ctx.lineTo(nextPoint.x, nextPoint.y);\n      } else {\n        ctx.closePath();\n      }\n    });\n    ctx.stroke();\n  }\n}\n\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {LimitsService, PointPositionChange, PositionChangeData, RolesArray} from '../../services/limits.service';\nimport {MatBottomSheet} from '@angular/material/bottom-sheet';\nimport {NgxFilterMenuComponent} from '../filter-menu/ngx-filter-menu.component';\nimport {PointShape} from '../../PrivateModels';\n// import {NgxOpenCVService} from '../../services/ngx-opencv.service';\nimport {ImageDimensions, DocScannerConfig, OpenCVState} from '../../PublicModels';\nimport {EditorActionButton, PointOptions} from '../../PrivateModels';\nimport {NgxOpenCVService} from 'ngx-opencv';\n\ndeclare var cv: any;\n\n@Component({\n  selector: 'ngx-doc-scanner',\n  templateUrl: './ngx-doc-scanner.component.html',\n  styleUrls: ['./ngx-doc-scanner.component.scss']\n})\nexport class NgxDocScannerComponent implements OnInit {\n  /**\n   * editor config object\n   */\n  options: ImageEditorConfig;\n  // ************* //\n  // EDITOR CONFIG //\n  // ************* //\n  /**\n   * an array of action buttons displayed on the editor screen\n   */\n  private editorButtons: Array<EditorActionButton> = [\n    {\n      name: 'exit',\n      action: () => {\n        this.exitEditor.emit('canceled');\n      },\n      icon: 'arrow_back',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'rotate',\n      action: this.rotateImage.bind(this),\n      icon: 'rotate_right',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'done_crop',\n      action: async () => {\n        this.mode = 'color';\n        await this.transform();\n        await this.applyFilter(true);\n      },\n      icon: 'done',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'back',\n      action: () => {\n        this.mode = 'crop';\n        this.loadFile(this.originalImage);\n      },\n      icon: 'arrow_back',\n      type: 'fab',\n      mode: 'color'\n    },\n    {\n      name: 'filter',\n      action: () => {\n        return this.chooseFilters();\n      },\n      icon: 'photo_filter',\n      type: 'fab',\n      mode: 'color'\n    },\n    {\n      name: 'upload',\n      action: this.exportImage.bind(this),\n      icon: 'cloud_upload',\n      type: 'fab',\n      mode: 'color'\n    },\n  ];\n  /**\n   * returns an array of buttons according to the editor mode\n   */\n  get displayedButtons() {\n    return this.editorButtons.filter(button => {\n      return button.mode === this.mode;\n    });\n  }\n  /**\n   * max width of the preview area\n   */\n  private maxPreviewWidth: number;\n  /**\n   * dimensions of the image container\n   */\n  imageDivStyle: {[key: string]: string|number};\n  /**\n   * editor div style\n   */\n  editorStyle: {[key: string]: string|number};\n\n  // ************* //\n  // EDITOR STATE //\n  // ************* //\n  /**\n   * state of opencv loading\n   */\n  private cvState: string;\n  /**\n   * true after the image is loaded and preview is displayed\n   */\n  imageLoaded = false;\n  /**\n   * editor mode\n   */\n  mode: 'crop'|'color' = 'crop';\n  /**\n   * filter selected by the user, returned by the filter selector bottom sheet\n   */\n  private selectedFilter = 'default';\n\n  // ******************* //\n  // OPERATION VARIABLES //\n  // ******************* //\n  /**\n   * viewport dimensions\n   */\n  private screenDimensions: ImageDimensions;\n  /**\n   * image dimensions\n   */\n  private imageDimensions: ImageDimensions = {\n    width: 0,\n    height: 0\n  };\n  /**\n   * dimensions of the preview pane\n   */\n  previewDimensions: ImageDimensions;\n  /**\n   * ration between preview image and original\n   */\n  private imageResizeRatio: number;\n  /**\n   * stores the original image for reset purposes\n   */\n  private originalImage: File;\n  /**\n   * stores the edited image\n   */\n  private editedImage: HTMLCanvasElement;\n  /**\n   * stores the preview image as canvas\n   */\n  @ViewChild('PreviewCanvas', {read: ElementRef}) private previewCanvas: ElementRef;\n  /**\n   * an array of points used by the crop tool\n   */\n  private points: Array<PointPositionChange>;\n\n  // ************** //\n  // EVENT EMITTERS //\n  // ************** //\n  /**\n   * optional binding to the exit button of the editor\n   */\n  @Output() exitEditor: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * fires on edit completion\n   */\n  @Output() editResult: EventEmitter<Blob> = new EventEmitter<Blob>();\n  /**\n   * emits errors, can be linked to an error handler of choice\n   */\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n  /**\n   * emits the loading status of the cv module.\n   */\n  @Output() ready: EventEmitter<boolean> = new EventEmitter<boolean>();\n  /**\n   * emits true when processing is done, false when completed\n   */\n  @Output() processing: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  // ****** //\n  // INPUTS //\n  // ****** //\n  /**\n   * set image for editing\n   * @param file - file from form input\n   */\n  @Input() set file(file: File) {\n    if (file) {\n      setTimeout(() => {\n        this.processing.emit(true);\n      }, 5);\n      this.imageLoaded = false;\n      this.originalImage = file;\n      this.ngxOpenCv.cvState.subscribe(\n        async (cvState: OpenCVState) => {\n          if (cvState.ready) {\n            // read file to image & canvas\n            await this.loadFile(file);\n            this.processing.emit(false);\n          }\n        });\n    }\n  }\n\n  /**\n   * editor configuration object\n   */\n  @Input() config: DocScannerConfig;\n\n\n  constructor(private ngxOpenCv: NgxOpenCVService, private limitsService: LimitsService, private bottomSheet: MatBottomSheet) {\n    this.screenDimensions = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n\n    // subscribe to status of cv module\n    this.ngxOpenCv.cvState.subscribe((cvState: OpenCVState) => {\n      this.cvState = cvState.state;\n      this.ready.emit(cvState.ready);\n      if (cvState.error) {\n        this.error.emit(new Error('error loading cv'));\n      } else if (cvState.loading) {\n        this.processing.emit(true);\n      } else if (cvState.ready) {\n        this.processing.emit(false);\n      }\n    });\n\n    // subscribe to positions of crop tool\n    this.limitsService.positions.subscribe(points => {\n      this.points = points;\n    });\n  }\n\n  ngOnInit() {\n    // set options from config object\n    this.options = new ImageEditorConfig(this.config);\n    // set export image icon\n    this.editorButtons.forEach(button => {\n      if (button.name === 'upload') {\n        button.icon = this.options.exportImageIcon;\n      }\n    });\n    this.maxPreviewWidth = this.options.maxPreviewWidth;\n    this.editorStyle = this.options.editorStyle;\n  }\n\n  // ***************************** //\n  // editor action buttons methods //\n  // ***************************** //\n\n  /**\n   * emits the exitEditor event\n   */\n  exit() {\n    this.exitEditor.emit('canceled');\n  }\n\n  /**\n   * applies the selected filter, and when done emits the resulted image\n   */\n  private async exportImage() {\n    await this.applyFilter(false);\n    if (this.options.maxImageDimensions) {\n      this.resize(this.editedImage)\n        .then(resizeResult => {\n          resizeResult.toBlob((blob) => {\n            this.editResult.emit(blob);\n            this.processing.emit(false);\n          }, this.originalImage.type);\n        });\n    } else {\n      this.editedImage.toBlob((blob) => {\n        this.editResult.emit(blob);\n        this.processing.emit(false);\n      }, this.originalImage.type);\n    }\n  }\n\n  /**\n   * open the bottom sheet for selecting filters, and applies the selected filter in preview mode\n   */\n  private chooseFilters() {\n    const data = { filter: this.selectedFilter };\n    const bottomSheetRef = this.bottomSheet.open(NgxFilterMenuComponent, {\n      data: data\n    });\n    bottomSheetRef.afterDismissed().subscribe(() => {\n      this.selectedFilter = data.filter;\n      this.applyFilter(true);\n    });\n\n  }\n\n  // *************************** //\n  // File Input & Output Methods //\n  // *************************** //\n  /**\n   * load image from input field\n   */\n  private loadFile(file: File) {\n    return new Promise(async (resolve, reject) => {\n      this.processing.emit(true);\n      try {\n        await this.readImage(file);\n      } catch (err) {\n        console.error(err);\n        this.error.emit(new Error(err));\n      }\n      try {\n        await this.showPreview();\n      } catch (err) {\n        console.error(err);\n        this.error.emit(new Error(err));\n      }\n      // set pane limits\n      // show points\n      this.imageLoaded = true;\n      await this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\n      setTimeout(async () => {\n        await this.detectContours();\n        this.processing.emit(false);\n        resolve();\n      }, 15);\n    });\n  }\n\n  /**\n   * read image from File object\n   */\n  private readImage(file: File) {\n    return new Promise(async (resolve, reject) => {\n      let imageSrc;\n      try {\n        imageSrc = await readFile();\n      } catch (err) {\n        reject(err);\n      }\n      const img = new Image();\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        this.editedImage = <HTMLCanvasElement> document.createElement('canvas');\n        this.editedImage.width = img.width;\n        this.editedImage.height = img.height;\n        const ctx = this.editedImage.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        // resize image if larger than max image size\n        const width = img.width > img.height ? img.height : img.width;\n        if (width > this.options.maxImageDimensions.width) {\n          this.editedImage = await this.resize(this.editedImage);\n        }\n        this.imageDimensions.width = this.editedImage.width;\n        this.imageDimensions.height = this.editedImage.height;\n        this.setPreviewPaneDimensions(this.editedImage);\n        resolve();\n      };\n      img.src = imageSrc;\n    });\n\n    /**\n     * read file from input field\n     */\n    function readFile() {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          resolve(reader.result);\n        };\n        reader.onerror = (err) => {\n          reject(err);\n        };\n        reader.readAsDataURL(file);\n      });\n    }\n  }\n\n  // ************************ //\n  // Image Processing Methods //\n  // ************************ //\n  /**\n   * rotate image 90 degrees\n   */\n  private rotateImage() {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      setTimeout(() => {\n        const dst = cv.imread(this.editedImage);\n        // const dst = new cv.Mat();\n        cv.transpose(dst, dst);\n        cv.flip(dst, dst, 1);\n        cv.imshow(this.editedImage, dst);\n        // src.delete();\n        dst.delete();\n        // save current preview dimensions and positions\n        const initialPreviewDimensions = {width: 0, height: 0};\n        Object.assign(initialPreviewDimensions, this.previewDimensions);\n        const initialPositions = Array.from(this.points);\n        // get new dimensions\n        // set new preview pane dimensions\n        this.setPreviewPaneDimensions(this.editedImage);\n        // get preview pane resize ratio\n        const previewResizeRatios = {\n          width: this.previewDimensions.width / initialPreviewDimensions.width,\n          height: this.previewDimensions.height / initialPreviewDimensions.height\n        };\n        // set new preview pane dimensions\n\n        this.limitsService.rotateClockwise(previewResizeRatios, initialPreviewDimensions, initialPositions);\n        this.showPreview().then(() => {\n          this.processing.emit(false);\n          resolve();\n        });\n      }, 30);\n    });\n\n\n  }\n\n  /**\n   * detects the contours of the document and\n   **/\n  private detectContours(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      setTimeout(() => {\n        // load the image and compute the ratio of the old height to the new height, clone it, and resize it\n        const processingResizeRatio = 0.5;\n        const dst = cv.imread(this.editedImage);\n        const dsize = new cv.Size(dst.rows * processingResizeRatio, dst.cols * processingResizeRatio);\n        const ksize = new cv.Size(5, 5);\n        // convert the image to grayscale, blur it, and find edges in the image\n        cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n        cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n        cv.Canny(dst, dst, 75, 200);\n        // find contours\n        cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\n        const contours = new cv.MatVector();\n        const hierarchy = new cv.Mat();\n        cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\n        const rect = cv.boundingRect(dst);\n        dst.delete(); hierarchy.delete(); contours.delete();\n        // transform the rectangle into a set of points\n        Object.keys(rect).forEach(key => {\n          rect[key] = rect[key]  * this.imageResizeRatio;\n        });\n\n        const contourCoordinates = [\n          new PositionChangeData({x: rect.x, y: rect.y}, ['left', 'top']),\n          new PositionChangeData({x: rect.x + rect.width, y: rect.y}, ['right', 'top']),\n          new PositionChangeData({x: rect.x + rect.width, y: rect.y + rect.height}, ['right', 'bottom']),\n          new PositionChangeData({x: rect.x, y: rect.y + rect.height}, ['left', 'bottom']),\n        ];\n\n        this.limitsService.repositionPoints(contourCoordinates);\n        // this.processing.emit(false);\n        resolve();\n      }, 30);\n    });\n  }\n\n  /**\n   * apply perspective transform\n   */\n  private transform(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      setTimeout(() => {\n        const dst = cv.imread(this.editedImage);\n\n        // create source coordinates matrix\n        const sourceCoordinates = [\n          this.getPoint(['top', 'left']),\n          this.getPoint(['top', 'right']),\n          this.getPoint(['bottom', 'right']),\n          this.getPoint(['bottom', 'left'])\n        ].map(point => {\n          return [point.x / this.imageResizeRatio, point.y / this.imageResizeRatio];\n        });\n\n        // get max width\n        const bottomWidth = this.getPoint(['bottom', 'right']).x - this.getPoint(['bottom', 'left']).x;\n        const topWidth = this.getPoint(['top', 'right']).x - this.getPoint(['top', 'left']).x;\n        const maxWidth = Math.max(bottomWidth, topWidth) / this.imageResizeRatio;\n        // get max height\n        const leftHeight = this.getPoint(['bottom', 'left']).y - this.getPoint(['top', 'left']).y;\n        const rightHeight = this.getPoint(['bottom', 'right']).y - this.getPoint(['top', 'right']).y;\n        const maxHeight = Math.max(leftHeight, rightHeight) / this.imageResizeRatio;\n        // create dest coordinates matrix\n        const destCoordinates = [\n          [0, 0],\n          [maxWidth - 1, 0],\n          [maxWidth - 1, maxHeight - 1],\n          [0, maxHeight - 1]\n        ];\n\n        // convert to open cv matrix objects\n        const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates));\n        const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates));\n        const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\n        // set new image size\n        const dsize = new cv.Size(maxWidth, maxHeight);\n        // perform warp\n        cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n        cv.imshow(this.editedImage, dst);\n\n        dst.delete(); Ms.delete(); Md.delete(); transformMatrix.delete();\n\n        this.setPreviewPaneDimensions(this.editedImage);\n        this.showPreview().then(() => {\n          this.processing.emit(false);\n          resolve();\n        });\n      }, 30);\n    });\n  }\n\n  /**\n   * applies the selected filter to the image\n   * @param preview - when true, will not apply the filter to the edited image but only display a preview.\n   * when false, will apply to editedImage\n   */\n  private applyFilter(preview: boolean): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n      this.processing.emit(true);\n      // default options\n      const options = {\n        blur: false,\n        th: true,\n        thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n        thMeanCorrection: 10,\n        thBlockSize: 25,\n        thMax: 255,\n        grayScale: true,\n      };\n      const dst = cv.imread(this.editedImage);\n\n      switch (this.selectedFilter) {\n        case 'original':\n          options.th = false;\n          options.grayScale = false;\n          options.blur = false;\n          break;\n        case 'magic_color':\n          options.grayScale = false;\n          break;\n        case 'bw2':\n          options.thMode = cv.ADAPTIVE_THRESH_GAUSSIAN_C;\n          options.thMeanCorrection = 15;\n          options.thBlockSize = 15;\n          break;\n        case 'bw3':\n          options.blur = true;\n          options.thMeanCorrection = 15;\n          break;\n      }\n\n      setTimeout(async () => {\n        if (options.grayScale) {\n          cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n        }\n        if (options.blur) {\n          const ksize = new cv.Size(5, 5);\n          cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n        }\n        if (options.th) {\n          if (options.grayScale) {\n            cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\n          } else {\n            dst.convertTo(dst, -1, 1, 60);\n            cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\n          }\n        }\n        if (!preview) {\n          cv.imshow(this.editedImage, dst);\n        }\n        await this.showPreview(dst);\n        this.processing.emit(false);\n        resolve();\n      }, 30);\n    });\n  }\n\n  /**\n   * resize an image to fit constraints set in options.maxImageDimensions\n   */\n  private resize(image: HTMLCanvasElement): Promise<HTMLCanvasElement> {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      setTimeout(() => {\n        const src = cv.imread(image);\n        const currentDimensions = {\n          width: src.size().width,\n          height: src.size().height\n        };\n        const resizeDimensions = {\n          width: 0,\n          height: 0\n        };\n        if (currentDimensions.width > this.options.maxImageDimensions.width) {\n          resizeDimensions.width = this.options.maxImageDimensions.width;\n          resizeDimensions.height = this.options.maxImageDimensions.width / currentDimensions.width * currentDimensions.height;\n          if (resizeDimensions.height > this.options.maxImageDimensions.height) {\n            resizeDimensions.height = this.options.maxImageDimensions.height;\n            resizeDimensions.width = this.options.maxImageDimensions.height / currentDimensions.height * currentDimensions.width;\n          }\n          const dsize = new cv.Size(Math.floor(resizeDimensions.width), Math.floor(resizeDimensions.height));\n          cv.resize(src, src, dsize, 0, 0, cv.INTER_AREA);\n          const resizeResult = <HTMLCanvasElement> document.createElement('canvas');\n          cv.imshow(resizeResult, src);\n          src.delete();\n          this.processing.emit(false);\n          resolve(resizeResult);\n        } else {\n          this.processing.emit(false);\n          resolve(image);\n        }\n      }, 30);\n    });\n  }\n\n  /**\n   * display a preview of the image on the preview canvas\n   */\n  private showPreview(image?: any) {\n    return new Promise((resolve, reject) => {\n      let src;\n      if (image) {\n        src = image;\n      } else {\n        src = cv.imread(this.editedImage);\n      }\n      const dst = new cv.Mat();\n      const dsize = new cv.Size(0, 0);\n      cv.resize(src, dst, dsize, this.imageResizeRatio, this.imageResizeRatio, cv.INTER_AREA);\n      cv.imshow(this.previewCanvas.nativeElement, dst);\n      src.delete();\n      dst.delete();\n      resolve();\n    });\n  }\n\n  // *************** //\n  // Utility Methods //\n  // *************** //\n  /**\n   * set preview canvas dimensions according to the canvas element of the original image\n   */\n  private setPreviewPaneDimensions(img: HTMLCanvasElement) {\n    // set preview pane dimensions\n    this.previewDimensions = this.calculateDimensions(img.width, img.height);\n    this.previewCanvas.nativeElement.width = this.previewDimensions.width;\n    this.previewCanvas.nativeElement.height = this.previewDimensions.height;\n    this.imageResizeRatio = this.previewDimensions.width / img.width;\n    this.imageDivStyle = {\n      width: this.previewDimensions.width + this.options.cropToolDimensions.width + 'px',\n      height: this.previewDimensions.height + this.options.cropToolDimensions.height + 'px',\n      'margin-left': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 + ${this.options.cropToolDimensions.width / 2}px)`,\n      'margin-right': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 - ${this.options.cropToolDimensions.width / 2}px)`,\n    };\n    this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\n  }\n\n  /**\n   * calculate dimensions of the preview canvas\n   */\n  private calculateDimensions(width: number, height: number): { width: number; height: number; ratio: number} {\n    const ratio = width / height;\n\n    const maxWidth = this.screenDimensions.width > this.maxPreviewWidth ?\n      this.maxPreviewWidth : this.screenDimensions.width - 40;\n    const maxHeight = this.screenDimensions.height - 240;\n    const calculated = {\n      width: maxWidth,\n      height: Math.round(maxWidth / ratio),\n      ratio: ratio\n    };\n\n    if (calculated.height > maxHeight) {\n      calculated.height = maxHeight;\n      calculated.width = Math.round(maxHeight * ratio);\n    }\n    return calculated;\n  }\n\n  /**\n   * returns a point by it's roles\n   * @param roles - an array of roles by which the point will be fetched\n   */\n  private getPoint(roles: RolesArray) {\n    return this.points.find(point => {\n      return this.limitsService.compareArray(point.roles, roles);\n    });\n  }\n}\n\n/**\n * a class for generating configuration objects for the editor\n */\nclass ImageEditorConfig implements DocScannerConfig {\n  /**\n   * max dimensions of oputput image. if set to zero\n   */\n  maxImageDimensions: ImageDimensions = {\n    width: 800,\n    height: 1200\n  };\n  /**\n   * background color of the main editor div\n   */\n  editorBackgroundColor = '#fefefe';\n  /**\n   * css properties for the main editor div\n   */\n  editorDimensions: { width: string; height: string; } = {\n    width: '100vw',\n    height: '100vh'\n  };\n  /**\n   * css that will be added to the main div of the editor component\n   */\n  extraCss: {[key: string]: string|number} = {\n    position: 'absolute',\n    top: 0,\n    left: 0\n  };\n\n  /**\n   * material design theme color name\n   */\n  buttonThemeColor: 'primary'|'warn'|'accent' = 'accent';\n  /**\n   * icon for the button that completes the editing and emits the edited image\n   */\n  exportImageIcon = 'cloud_upload';\n  /**\n   * color of the crop tool\n   */\n  cropToolColor = '#3cabe2';\n  /**\n   * shape of the crop tool, can be either a rectangle or a circle\n   */\n  cropToolShape: PointShape = 'rect';\n  /**\n   * dimensions of the crop tool\n   */\n  cropToolDimensions: ImageDimensions = {\n    width: 10,\n    height: 10\n  };\n  /**\n   * aggregation of the properties regarding point attributes generated by the class constructor\n   */\n  pointOptions: PointOptions;\n  /**\n   * aggregation of the properties regarding the editor style generated by the class constructor\n   */\n  editorStyle?: {[key: string]: string|number};\n  /**\n   * crop tool outline width\n   */\n  cropToolLineWeight = 3;\n  /**\n   * maximum size of the preview pane\n   */\n  maxPreviewWidth = 800;\n\n  constructor(options: DocScannerConfig) {\n    if (options) {\n      Object.keys(options).forEach(key => {\n        this[key] = options[key];\n      });\n    }\n\n    this.editorStyle = {'background-color': this.editorBackgroundColor };\n    Object.assign(this.editorStyle, this.editorDimensions);\n    Object.assign(this.editorStyle, this.extraCss);\n\n    this.pointOptions = {\n      shape: this.cropToolShape,\n      color: this.cropToolColor,\n      width: 0,\n      height: 0\n    };\n    Object.assign(this.pointOptions, this.cropToolDimensions);\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgxDraggablePointComponent} from './components/draggable-point/ngx-draggable-point.component';\nimport {NgxFilterMenuComponent} from './components/filter-menu/ngx-filter-menu.component';\nimport {NgxShapeOutlineComponent} from './components/shape-outline/ngx-shape-outline.component';\nimport {NgxDocScannerComponent} from './components/image-editor/ngx-doc-scanner.component';\nimport {LimitsService} from './services/limits.service';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {AngularDraggableModule} from 'angular2-draggable';\nimport {CommonModule} from '@angular/common';\nimport {OpenCVConfig} from './PublicModels';\nimport {NgxOpenCVModule} from 'ngx-opencv';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatListModule } from '@angular/material/list';\nimport {NgxOpenCVService, OpenCvConfigToken} from 'ngx-opencv';\n\n@NgModule({\n  declarations: [\n    NgxDraggablePointComponent,\n    NgxFilterMenuComponent,\n    NgxShapeOutlineComponent,\n    NgxDocScannerComponent,\n  ],\n  imports: [\n    FlexLayoutModule,\n    MatButtonModule,\n    MatIconModule,\n    MatBottomSheetModule,\n    MatListModule,\n    AngularDraggableModule,\n    CommonModule,\n    NgxOpenCVModule,\n  ],\n  exports: [\n    FlexLayoutModule,\n    MatButtonModule,\n    MatIconModule,\n    MatBottomSheetModule,\n    MatListModule,\n    AngularDraggableModule,\n    NgxDocScannerComponent,\n  ],\n  entryComponents: [\n    NgxFilterMenuComponent,\n  ],\n  providers: [\n    NgxOpenCVService,\n    LimitsService,\n  ]\n})\nexport class NgxDocumentScannerModule {\n  static forRoot(config: OpenCVConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxDocumentScannerModule,\n      providers: [\n        { provide: OpenCvConfigToken, useValue: config },\n      ],\n    };\n  }\n}\n","/**\n * describes a state object for the OpenCV module\n */\nimport {PointShape} from './PrivateModels';\n\nexport interface OpenCVState {\n  ready: boolean;\n  loading: boolean;\n  error: boolean;\n  state: string;\n}\n\n/**\n * describes an object with width and height properties\n */\nexport interface ImageDimensions {\n  width: number;\n  height: number;\n}\n\n/**\n * describes a configuration object for the editor\n */\nexport interface DocScannerConfig {\n  /**\n   * max dimensions of output image. if set to zero will not resize the image\n   */\n  maxImageDimensions?: ImageDimensions;\n  /**\n   * background color of the main editor div\n   */\n  editorBackgroundColor?: string;\n  /**\n   * css properties for the main editor div\n   */\n  editorDimensions?: { width: string; height: string; };\n  /**\n   * css that will be added to the main div of the editor component\n   */\n  extraCss?: { [key: string]: string | number };\n  /**\n   * material design theme color name\n   */\n  buttonThemeColor?: 'primary' | 'warn' | 'accent';\n  /**\n   * icon for the button that completes the editing and emits the edited image\n   */\n  exportImageIcon?: string;\n  /**\n   * color of the crop tool (points and connecting lines)\n   */\n  cropToolColor?: string;\n  /**\n   * shape of the crop tool points\n   */\n  cropToolShape?: PointShape;\n  /**\n   * width and height of the crop tool points\n   */\n  cropToolDimensions?: ImageDimensions;\n  /**\n   * weight of the crop tool's connecting lines\n   */\n  cropToolLineWeight?: number;\n  /**\n   * max width of the preview pane\n   */\n  maxPreviewWidth?: number;\n}\n\n/**\n * describes a configuration object for the OpenCV service\n */\nexport interface OpenCVConfig {\n  /**\n   * path to the directory containing the OpenCV files, in the form of '/path/to/<opencv directory>'\n   * directory must contain the the following files:\n   * --<OpenCvDir>\n   * ----opencv.js\n   * ----opencv_js.wasm\n   */\n  openCVDirPath?: string;\n  /**\n   * additional callback that will run when OpenCv has finished loading and parsing\n   */\n  runOnOpenCVInit?: Function;\n}\n"]}